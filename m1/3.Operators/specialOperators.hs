module SpecialOperators where

-- Можно так
a = sin 0

-- В пред. случаем пробел это специальный оператор, который разделяет функцию и аргумент
-- Но его можно переопределить (пробел в смысле)
-- т.е.
infixr 0 $$
f $$ x = f x
-- тут $$ это бинарный опреатор, который применяет функцию к её аргументу
b = sin $$ 0

-- Теперь мы можем записывать всякое, как показано ниже
с = sin (pi / 2)
-- А можем и вот так.
-- Мы снижаем приоритет оператора пробел, который стоит между функцией и аргунетом, таки образом скобки можно опустить,
-- так как сначала вычислится pi / 2, так как приоритет деления (/) выше чем у $$
d = sin $$ pi / 2
-- В Haskell есть такой оператор уже - $, он имеет правую ассоциативность, и может применяться в сложных конструкциях
-- f (g x (h y)) = f $ g x (h y) = f $ g x $ h y

e = logBase 4 (min 20 (9 + 7))
e = logBase 4 $ min 20 $ 9 + 7





